; Generated by c86 v6.0pre 29 Nov 2024 (nasm) from chess.i
	cpu	8086

	section .data

	section .text
	align	2
	global	_npf_max
_npf_max:
	push	bp
	mov	bp, sp
	mov	ax, word [bp+6]
	cmp	ax, word [bp+4]
	jge	L_chess_3
	mov	ax, word [bp+4]
	jmp	L_chess_5
L_chess_3:
	mov	ax, word [bp+6]
L_chess_5:
	mov	sp, bp
	pop	bp
	ret

	section .data

	section .text
	align	2
	global	_npf_parse_format_spec
_npf_parse_format_spec:
	push	bp
	mov	bp, sp
	sub	sp, 4
	mov	ax, word [bp+4]
	mov	word [bp-2], ax
	mov	si, word [bp+6]
	add	si, 2
	mov	byte [si], 32
	mov	si, word [bp+6]
	mov	byte [si], 0
	mov	si, word [bp+6]
	inc	si
	mov	byte [si], 0
	jmp	L_chess_10
L_chess_9:
	mov	si, word [bp-2]
	mov	al, byte [si]
	sub	al, 43
	je	L_chess_14
	sub	al, -11
	je	L_chess_15
	sub	al, 3
	je	L_chess_16
	jmp	L_chess_11
L_chess_14:
	mov	si, word [bp+6]
	mov	byte [si], 43
	jmp	L_chess_10
L_chess_15:
	mov	si, word [bp+6]
	mov	al, byte [si]
	test	al, al
	jne	L_chess_10
	mov	byte [si], 32
	jmp	L_chess_10
L_chess_16:
	mov	si, word [bp+6]
	inc	si
	mov	byte [si], 35
L_chess_10:
	mov	ax, word [bp-2]
	inc	ax
	mov	word [bp-2], ax
	mov	si, ax
	mov	al, byte [si]
	test	al, al
	jne	L_chess_9
L_chess_11:
	mov	byte [bp-3], 0
	mov	si, word [bp+6]
	add	si, 3
	mov	byte [si], 0
	mov	ax, word [bp-2]
	inc	word [bp-2]
	mov	si, ax
	mov	al, byte [si]
	sub	al, 104
	je	L_chess_20
	sub	al, 4
	je	L_chess_21
	dec	word [bp-2]
	jmp	L_chess_18
L_chess_20:
	mov	si, word [bp+6]
	add	si, 3
	mov	byte [si], 1
	mov	si, word [bp-2]
	cmp	byte [si], 104
	jne	L_chess_18
	mov	si, word [bp+6]
	add	si, 3
	mov	byte [si], 3
	inc	word [bp-2]
	jmp	L_chess_18
L_chess_21:
	mov	si, word [bp+6]
	add	si, 3
	mov	byte [si], 4
L_chess_18:
	mov	ax, word [bp-2]
	inc	word [bp-2]
	mov	si, ax
	mov	al, byte [si]
	sub	al, 37
	je	L_chess_25
	sub	al, 62
	je	L_chess_26
	sub	al, 16
	je	L_chess_27
	sub	al, -15
	je	L_chess_28
	sub	al, 5
	je	L_chess_28
	sub	al, 6
	je	L_chess_30
	sub	al, 6
	je	L_chess_35
	sub	al, -29
	je	L_chess_36
	sub	al, 32
	je	L_chess_37
	sub	al, -8
	je	L_chess_34
	xor	ax, ax
L_chess_39:
	mov	sp, bp
	pop	bp
	ret
L_chess_25:
	mov	si, word [bp+6]
	add	si, 4
	mov	byte [si], 1
L_chess_23:
	mov	ax, word [bp-2]
	sub	ax, word [bp+4]
	jmp	L_chess_39
L_chess_26:
	mov	si, word [bp+6]
	add	si, 4
	mov	byte [si], 2
	jmp	L_chess_23
L_chess_27:
	mov	si, word [bp+6]
	add	si, 4
	mov	byte [si], 3
	jmp	L_chess_23
L_chess_28:
	mov	byte [bp-3], 4
L_chess_30:
	mov	al, byte [bp-3]
	test	al, al
	jne	L_chess_35
	mov	byte [bp-3], 5
L_chess_35:
	mov	al, byte [bp-3]
	test	al, al
	jne	L_chess_36
	mov	byte [bp-3], 7
L_chess_36:
	mov	al, byte [bp-3]
	test	al, al
	jne	L_chess_37
	mov	si, word [bp+6]
	add	si, 2
	mov	byte [si], 0
L_chess_37:
	mov	al, byte [bp-3]
	test	al, al
	jne	L_chess_38
	mov	byte [bp-3], 6
L_chess_38:
	mov	si, word [bp+6]
	add	si, 4
	mov	al, byte [bp-3]
	mov	byte [si], al
	jmp	L_chess_23
L_chess_34:
	mov	si, word [bp+6]
	add	si, 4
	mov	byte [si], 8
	jmp	L_chess_23

	section .data

	section .text
	align	2
	global	_npf_utoa_rev
_npf_utoa_rev:
	push	bp
	mov	bp, sp
	sub	sp, 4
	mov	byte [bp-1], 0
L_chess_43:
	mov	al, byte [bp+10]
	xor	ah, ah
	cwd
	push	dx
	push	ax
	push	word [bp+6]
	push	word [bp+4]
	call	ilmod
	mov	byte [bp-2], al
	cmp	byte [bp-2], 10
	jge	L_chess_46
	mov	ax, 48
	jmp	L_chess_47
L_chess_46:
	mov	al, byte [bp+12]
	cbw
	add	ax, 55
L_chess_47:
	mov	dl, byte [bp-2]
	xchg	ax, dx
	cbw
	xchg	dx, ax
	add	ax, dx
	mov	dx, word [bp+8]
	inc	word [bp+8]
	mov	si, dx
	mov	byte [si], al
	inc	byte [bp-1]
	mov	al, byte [bp+10]
	and	ax, 65280
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp+4]
	push	ax
	call	asuldiv
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_chess_43
	mov	al, byte [bp-1]
	xor	ah, ah
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	sp, bp
	pop	bp
	ret

	section .data

	section .text
	align	2
	global	_npf_bufputc
_npf_bufputc:
	push	bp
	mov	bp, sp
	push	cx
	mov	ax, word [bp+6]
	mov	word [bp-2], ax
	mov	si, word [bp-2]
	add	si, 4
	mov	di, word [bp-2]
	add	di, 2
	mov	ax, word [di]
	cmp	ax, word [si]
	jle	L_chess_52
	mov	si, word [bp-2]
	add	si, 4
	mov	ax, word [si]
	inc	word [si]
	mov	si, ax
	mov	di, word [bp-2]
	add	si, word [di]
	mov	al, byte [bp+4]
	mov	byte [si], al
L_chess_52:
	mov	sp, bp
	pop	bp
	ret

	section .data

	section .text
	align	2
	global	_npf_bufputc_nop
_npf_bufputc_nop:
	push	bp
	mov	bp, sp
	mov	sp, bp
	pop	bp
	ret

	section .data

	section .text
	align	2
	global	_npf_putc_cnt
_npf_putc_cnt:
	push	bp
	mov	bp, sp
	push	cx
	mov	ax, word [bp+6]
	mov	word [bp-2], ax
	mov	si, word [bp-2]
	add	si, 4
	inc	word [si]
	mov	si, word [bp-2]
	add	si, 2
	push	word [si]
	push	word [bp+4]
	mov	si, word [bp-2]
	mov	si, word [si]
	call	si
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret

	section .data

	section .text
	align	2
	global	_npf_vpprintf
_npf_vpprintf:
	push	bp
	mov	bp, sp
	sub	sp, 66
	mov	ax, word [bp+8]
	mov	word [bp-8], ax
	mov	ax, word [bp+4]
	mov	word [bp-14], ax
	mov	ax, word [bp+6]
	mov	word [bp-12], ax
	mov	word [bp-10], 0
	jmp	L_chess_135
L_chess_62:
	mov	si, word [bp-8]
	cmp	byte [si], 37
	je	L_chess_65
	xor	ax, ax
	jmp	L_chess_66
L_chess_65:
	lea	ax, [bp-5]
	push	ax
	push	word [bp-8]
	call	_npf_parse_format_spec
	add	sp, 4
L_chess_66:
	mov	word [bp-16], ax
	mov	ax, word [bp-16]
	test	ax, ax
	jne	L_chess_67
	lea	ax, [bp-14]
	push	ax
	mov	ax, word [bp-8]
	inc	word [bp-8]
	mov	si, ax
	mov	al, byte [si]
	cbw
	push	ax
	call	_npf_putc_cnt
	add	sp, 4
	jmp	L_chess_135
L_chess_67:
	mov	ax, word [bp-16]
	add	word [bp-8], ax
	lea	ax, [bp-40]
	mov	word [bp-42], ax
	mov	byte [bp-43], 0
	mov	word [bp-46], 0
	mov	word [bp-48], 0
	mov	al, byte [bp-1]
	xor	ah, ah
	mov	si, ax
	dec	si
	cmp	si, 7
	ja	L_chess_71
	shl	si, 1
	jmp	word [si+L_chess_73]
L_chess_74:
	mov	si, word [bp-42]
	mov	byte [si], 37
	jmp	L_chess_140
L_chess_75:
	add	word [bp+10], 2
	mov	ax, word [bp+10]
	sub	ax, 2
	mov	si, ax
	mov	di, word [bp-42]
	mov	al, byte [si]
	mov	byte [di], al
L_chess_140:
	mov	word [bp-46], 1
	jmp	L_chess_71
L_chess_76:
	add	word [bp+10], 2
	mov	ax, word [bp+10]
	sub	ax, 2
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-42], ax
	mov	ax, word [bp-42]
	mov	word [bp-50], ax
	jmp	L_chess_83
L_chess_82:
	inc	word [bp-50]
	inc	word [bp-46]
L_chess_83:
	mov	si, word [bp-50]
	mov	al, byte [si]
	test	al, al
	jne	L_chess_82
	jmp	L_chess_71
L_chess_77:
	mov	word [bp-54], 0
	mov	word [bp-52], 0
	mov	al, byte [bp-2]
	sub	al, 0
	je	L_chess_89
	dec	al
	je	L_chess_89
	dec	al
	je	L_chess_89
	dec	al
	je	L_chess_91
	dec	al
	je	L_chess_92
	jmp	L_chess_86
L_chess_89:
	add	word [bp+10], 2
	mov	ax, word [bp+10]
	sub	ax, 2
	mov	si, ax
	mov	ax, word [si]
	jmp	L_chess_141
L_chess_91:
	add	word [bp+10], 2
	mov	ax, word [bp+10]
	sub	ax, 2
	mov	si, ax
	mov	al, byte [si]
	cbw
L_chess_141:
	cwd
	mov	word [bp-54], ax
	mov	word [bp-52], dx
	jmp	L_chess_86
L_chess_92:
	add	word [bp+10], 4
	mov	ax, word [bp+10]
	sub	ax, 4
	mov	si, ax
	mov	ax, word [si+0]
	mov	word [bp-54], ax
	mov	ax, word [si+2]
	mov	word [bp-52], ax
L_chess_86:
	cmp	word [bp-52], 0
	jg	L_chess_93
	jl	L_chess_95
	cmp	word [bp-54], 0
	jae	L_chess_93
L_chess_95:
	mov	al, 45
	jmp	L_chess_94
L_chess_93:
	mov	al, byte [bp-5]
L_chess_94:
	mov	byte [bp-43], al
	mov	ax, word [bp-54]
	mov	word [bp-58], ax
	mov	ax, word [bp-52]
	mov	word [bp-56], ax
	cmp	word [bp-52], 0
	jg	L_chess_96
	jl	L_chess_97
	cmp	word [bp-54], 0
	jae	L_chess_96
L_chess_97:
	mov	ax, word [bp-58]
	mov	dx, word [bp-56]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp-58], ax
	mov	word [bp-56], dx
L_chess_96:
	push	word [bp-3]
	mov	al, 10
	push	ax
	push	word [bp-42]
	push	word [bp-56]
	push	word [bp-58]
	call	_npf_utoa_rev
	add	sp, 10
	mov	word [bp-46], ax
	jmp	L_chess_71
L_chess_78:
	mov	word [bp-62], 0
	mov	word [bp-60], 0
	mov	al, byte [bp-2]
	sub	al, 0
	je	L_chess_101
	dec	al
	je	L_chess_101
	dec	al
	je	L_chess_101
	dec	al
	je	L_chess_103
	dec	al
	je	L_chess_104
L_chess_98:
	cmp	byte [bp-1], 5
	jne	L_chess_105
	mov	ax, 8
	jmp	L_chess_108
L_chess_101:
	add	word [bp+10], 2
	mov	ax, word [bp+10]
	sub	ax, 2
	mov	si, ax
	mov	ax, word [si]
	jmp	L_chess_142
L_chess_103:
	add	word [bp+10], 2
	mov	ax, word [bp+10]
	sub	ax, 2
	mov	si, ax
	mov	al, byte [si]
	and	ax, 65280
L_chess_142:
	xor	dx, dx
	mov	word [bp-62], ax
	mov	word [bp-60], dx
	jmp	L_chess_98
L_chess_104:
	add	word [bp+10], 4
	mov	ax, word [bp+10]
	sub	ax, 4
	mov	si, ax
	mov	ax, word [si+0]
	mov	word [bp-62], ax
	mov	ax, word [si+2]
	mov	word [bp-60], ax
	jmp	L_chess_98
L_chess_105:
	cmp	byte [bp-1], 6
	jne	L_chess_107
	mov	ax, 16
	jmp	L_chess_108
L_chess_107:
	mov	ax, 10
L_chess_108:
	mov	byte [bp-63], al
	push	word [bp-3]
	push	word [bp-63]
	push	word [bp-42]
	push	word [bp-60]
	push	word [bp-62]
	call	_npf_utoa_rev
	add	sp, 10
	mov	word [bp-46], ax
	mov	ax, word [bp-62]
	mov	dx, word [bp-60]
	or	dx, ax
	je	L_chess_109
	mov	al, byte [bp-4]
	test	al, al
	je	L_chess_109
	cmp	byte [bp-1], 5
	jne	L_chess_109
	mov	ax, word [bp-46]
	inc	word [bp-46]
	mov	si, ax
	add	si, word [bp-42]
	mov	byte [si], 48
L_chess_109:
	mov	ax, word [bp-62]
	mov	dx, word [bp-60]
	or	dx, ax
	je	L_chess_71
	mov	al, byte [bp-4]
	test	al, al
	je	L_chess_71
	cmp	byte [bp-1], 6
	jne	L_chess_111
	mov	word [bp-48], 88
L_chess_111:
	mov	ax, word [bp-48]
	test	ax, ax
	je	L_chess_71
	mov	al, byte [bp-3]
	cbw
	add	word [bp-48], ax
	jmp	L_chess_71
L_chess_81:
	mov	al, 32
	push	ax
	mov	al, 16
	push	ax
	push	word [bp-42]
	add	word [bp+10], 2
	mov	ax, word [bp+10]
	sub	ax, 2
	mov	si, ax
	mov	ax, word [si]
	xor	dx, dx
	push	dx
	push	ax
	call	_npf_utoa_rev
	add	sp, 10
	mov	word [bp-46], ax
	mov	word [bp-48], 120
L_chess_71:
	mov	ax, word [bp-48]
	test	ax, ax
	je	L_chess_118
	lea	ax, [bp-14]
	push	ax
	mov	ax, 48
	push	ax
	call	_npf_putc_cnt
	add	sp, 4
	lea	ax, [bp-14]
	push	ax
	push	word [bp-48]
	call	_npf_putc_cnt
	add	sp, 4
L_chess_118:
	cmp	byte [bp-1], 3
	jne	L_chess_120
	mov	word [bp-66], 0
	jmp	L_chess_122
L_chess_121:
	lea	ax, [bp-14]
	push	ax
	mov	si, word [bp-66]
	add	si, word [bp-42]
	mov	al, byte [si]
	cbw
	push	ax
	call	_npf_putc_cnt
	add	sp, 4
	inc	word [bp-66]
L_chess_122:
	mov	ax, word [bp-46]
	cmp	ax, word [bp-66]
	jg	L_chess_121
	jmp	L_chess_135
L_chess_120:
	mov	al, byte [bp-43]
	test	al, al
	je	L_chess_137
	lea	ax, [bp-14]
	push	ax
	mov	al, byte [bp-43]
	jmp	L_chess_143
L_chess_133:
	lea	ax, [bp-14]
	push	ax
	mov	si, word [bp-46]
	add	si, word [bp-42]
	mov	al, byte [si]
L_chess_143:
	cbw
	push	ax
	call	_npf_putc_cnt
	add	sp, 4
L_chess_137:
	mov	ax, word [bp-46]
	dec	word [bp-46]
	test	ax, ax
	jg	L_chess_133
L_chess_135:
	mov	si, word [bp-8]
	mov	al, byte [si]
	test	al, al
	jne	L_chess_62
	mov	ax, word [bp-10]
	mov	sp, bp
	pop	bp
	ret

	section .data
	align	2
L_chess_73:
	DW	L_chess_74,L_chess_75,L_chess_76,L_chess_77,L_chess_78
	DW	L_chess_78,L_chess_78,L_chess_81

	section .text
	align	2
	global	_npf_pprintf
_npf_pprintf:
	push	bp
	mov	bp, sp
	sub	sp, 4
	lea	ax, [bp+8]
	add	ax, 2
	mov	word [bp-2], ax
	push	word [bp-2]
	push	word [bp+8]
	push	word [bp+6]
	push	word [bp+4]
	call	_npf_vpprintf
	add	sp, 8
	mov	word [bp-4], ax
	mov	word [bp-2], 0
	mov	ax, word [bp-4]
	mov	sp, bp
	pop	bp
	ret

	section .data

	section .text
	align	2
	global	_npf_snprintf
_npf_snprintf:
	push	bp
	mov	bp, sp
	sub	sp, 4
	lea	ax, [bp+8]
	add	ax, 2
	mov	word [bp-2], ax
	push	word [bp-2]
	push	word [bp+8]
	push	word [bp+6]
	push	word [bp+4]
	call	_npf_vsnprintf
	add	sp, 8
	mov	word [bp-4], ax
	mov	word [bp-2], 0
	mov	ax, word [bp-4]
	mov	sp, bp
	pop	bp
	ret

	section .data

	section .text
	align	2
	global	_npf_vsnprintf
_npf_vsnprintf:
	push	bp
	mov	bp, sp
	sub	sp, 10
	mov	ax, word [bp+4]
	mov	word [bp-6], ax
	mov	ax, word [bp+6]
	mov	word [bp-4], ax
	mov	word [bp-2], 0
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_chess_155
	mov	ax, _npf_bufputc
	jmp	L_chess_156
L_chess_155:
	mov	ax, _npf_bufputc_nop
L_chess_156:
	mov	word [bp-8], ax
	push	word [bp+10]
	push	word [bp+8]
	lea	ax, [bp-6]
	push	ax
	push	word [bp-8]
	call	_npf_vpprintf
	add	sp, 8
	mov	word [bp-10], ax
	lea	ax, [bp-6]
	push	ax
	xor	ax, ax
	push	ax
	mov	si, word [bp-8]
	call	si
	add	sp, 4
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_chess_157
	mov	ax, word [bp+6]
	test	ax, ax
	je	L_chess_157
	dec	ax
	mov	si, ax
	add	si, word [bp+4]
	mov	byte [si], 0
L_chess_157:
	mov	ax, word [bp-10]
	mov	sp, bp
	pop	bp
	ret

	section .data

	section .text
	align	2
	global	_npf_printf
_npf_printf:
	push	bp
	mov	bp, sp
	sub	sp, 4
	lea	ax, [bp+4]
	add	ax, 2
	mov	word [bp-2], ax
	push	word [bp-2]
	push	word [bp+4]
	mov	ax, 80
	push	ax
	mov	ax, _buffer_internal
	push	ax
	call	_npf_vsnprintf
	add	sp, 8
	mov	word [bp-4], ax
	mov	word [bp-2], 0
	push	word [bp-4]
	mov	ax, _buffer_internal
	push	ax
	mov	ax, 1
	push	ax
	call	_write
	add	sp, 6
	mov	ax, word [bp-4]
	mov	sp, bp
	pop	bp
	ret

	section .data
	align	2
	global	_pwstatus
_pwstatus:
	DW	0,0,0,0,0
	DW	0,0,0
	global	_pbstatus
_pbstatus:
	DW	0,0,0,0,0
	DW	0,0,0
	global	_board
_board:
	DB	82,72,67,75,81
	DB	67,72,82,80,80
	DB	80,80,80,80,80
	DB	80,32,32,32,32
	DB	32,32,32,32,32
	DB	32,32,32,32,32
	DB	32,32,32,32,32
	DB	32,32,32,32,32
	DB	32,32,32,32,32
	DB	32,32,32,112,112
	DB	112,112,112,112,112
	DB	112,114,104,99,107
	DB	113,99,104,114
L_chess_168:
	DB	" ",0xA,0xA,"Press Enter To Continue ! ",0xA,0xA," ",0
L_chess_167:
	DB	0x1B,"[H",0x1B,"[J",0
L_chess_166:
	DB	0xA,0x9," ELKS port by Rafael Diniz",0xA,0
L_chess_165:
	DB	0xA,0xA,0x9," By Shreeji, Neel, Kirtan",0xA,0
L_chess_164:
	DB	0xA,0x9,"-- WELCOME TO CHESS GAME --",0

	section .text
	align	2
	global	_main
_main:
	push	bp
	mov	bp, sp
	sub	sp, 4
	mov	word [bp-2], 0
	mov	ax, L_chess_164
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, L_chess_165
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, L_chess_166
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, 1
	push	ax
	lea	ax, [bp-3]
	push	ax
	xor	ax, ax
	push	ax
	call	_read
	add	sp, 6
	mov	ax, L_chess_167
	push	ax
	call	_npf_printf
	add	sp, 2
L_chess_171:
	inc	word [bp-2]
	mov	ax, L_chess_167
	push	ax
	call	_npf_printf
	add	sp, 2
	call	_display
	mov	ax, word [bp-2]
	cwd
	mov	cx, 2
	idiv	cx
	mov	ax, dx
	test	ax, ax
	jne	L_chess_174
	call	_player2
	jmp	L_chess_175
L_chess_174:
	call	_player1
L_chess_175:
	mov	ax, L_chess_168
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, 1
	push	ax
	lea	ax, [bp-3]
	push	ax
	xor	ax, ax
	push	ax
	call	_read
	add	sp, 6
	cmp	byte [bp-3], 10
	je	L_chess_171
	mov	sp, bp
	pop	bp
	ret

	section .data
L_chess_181:
	DB	"|| ",0xA,0
L_chess_180:
	DB	"|| %c ",0
L_chess_179:
	DB	"%c ",0
L_chess_178:
	DB	"  ",0
L_chess_177:
	DB	"    %c",0

	section .text
	align	2
	global	_display
_display:
	push	bp
	mov	bp, sp
	sub	sp, 4
	mov	ax, (L_chess_168+31)
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	byte [bp-1], 48
	jmp	L_chess_185
L_chess_184:
	mov	al, byte [bp-1]
	cbw
	push	ax
	mov	ax, L_chess_177
	push	ax
	call	_npf_printf
	add	sp, 4
	inc	byte [bp-1]
L_chess_185:
	cmp	byte [bp-1], 56
	jl	L_chess_184
	mov	ax, (L_chess_165+28)
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	byte [bp-3], 0
	jmp	L_chess_189
L_chess_188:
	mov	ax, L_chess_178
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	byte [bp-1], 0
	jmp	L_chess_193
L_chess_192:
	mov	ax, (L_chess_164+28)
	push	ax
	call	_npf_printf
	add	sp, 2
	inc	byte [bp-1]
L_chess_193:
	cmp	byte [bp-1], 42
	jl	L_chess_192
	mov	ax, (L_chess_165+28)
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
	push	ax
	mov	ax, L_chess_179
	push	ax
	call	_npf_printf
	add	sp, 4
	mov	byte [bp-2], 0
	jmp	L_chess_197
L_chess_196:
	mov	al, byte [bp-3]
	cbw
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	al, byte [bp-2]
	cbw
	add	si, ax
	mov	al, byte [si]
	cbw
	push	ax
	mov	ax, L_chess_180
	push	ax
	call	_npf_printf
	add	sp, 4
	inc	byte [bp-2]
L_chess_197:
	cmp	byte [bp-2], 8
	jl	L_chess_196
	mov	ax, L_chess_181
	push	ax
	call	_npf_printf
	add	sp, 2
	inc	byte [bp-3]
L_chess_189:
	cmp	byte [bp-3], 8
	jl	L_chess_188
	mov	ax, L_chess_178
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	byte [bp-1], 0
	jmp	L_chess_201
L_chess_200:
	mov	ax, (L_chess_164+28)
	push	ax
	call	_npf_printf
	add	sp, 2
	inc	byte [bp-1]
L_chess_201:
	cmp	byte [bp-1], 42
	jl	L_chess_200
	mov	ax, (L_chess_165+28)
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret

	section .data

	section .text
	align	2
	global	_change
_change:
	push	bp
	mov	bp, sp
	push	cx
	mov	ax, word [bp+4]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+6]
	mov	al, byte [si]
	mov	byte [bp-1], al
	mov	ax, word [bp+8]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+10]
	mov	ax, word [bp+4]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	di, ax
	add	di, word [bp+6]
	mov	al, byte [si]
	mov	byte [di], al
	mov	ax, word [bp+8]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+10]
	mov	al, byte [bp-1]
	mov	byte [si], al
	mov	sp, bp
	pop	bp
	ret

	section .data
L_chess_210:
	DB	"%c%c* , ",0
L_chess_209:
	DB	"%c%c , ",0
L_chess_208:
	DB	"Available are: ",0xA,0

	section .text
	align	2
	global	_pawn
_pawn:
	push	bp
	mov	bp, sp
	mov	ax, word [bp+6]
	shl	ax, 1
	mov	si, ax
	add	si, _pwstatus
	inc	word [si]
	mov	ax, L_chess_208
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, word [bp+6]
	shl	ax, 1
	mov	si, ax
	add	si, _pwstatus
	cmp	word [si], 1
	jne	L_chess_213
	mov	ax, word [bp+4]
	inc	ax
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+6]
	cmp	byte [si], 32
	jne	L_chess_214
	mov	ax, word [bp+6]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	add	ax, 49
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_214:
	mov	ax, word [bp+4]
	add	ax, 2
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+6]
	cmp	byte [si], 32
	jne	L_chess_219
	mov	ax, word [bp+6]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	add	ax, 50
	push	ax
	mov	ax, L_chess_209
	jmp	L_chess_220
L_chess_213:
	mov	ax, word [bp+4]
	inc	ax
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+6]
	cmp	byte [si], 32
	jne	L_chess_217
	mov	ax, word [bp+6]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	add	ax, 49
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_217:
	mov	ax, word [bp+6]
	inc	ax
	push	ax
	mov	ax, word [bp+4]
	inc	ax
	push	ax
	call	_check
	add	sp, 4
	cmp	ax, 1
	jne	L_chess_218
	mov	ax, word [bp+6]
	add	ax, 49
	push	ax
	mov	ax, word [bp+4]
	add	ax, 49
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_218:
	mov	ax, word [bp+6]
	dec	ax
	push	ax
	mov	ax, word [bp+4]
	inc	ax
	push	ax
	call	_check
	add	sp, 4
	cmp	ax, 1
	jne	L_chess_219
	mov	ax, word [bp+6]
	add	ax, 47
	push	ax
	mov	ax, word [bp+4]
	add	ax, 49
	push	ax
	mov	ax, L_chess_210
L_chess_220:
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_219:
	mov	sp, bp
	pop	bp
	ret

	section .data
L_chess_223:
	DB	0xA,"Vertically:",0xA,0
L_chess_222:
	DB	"Horizontally: ",0xA,0

	section .text
	align	2
	global	_rook
_rook:
	push	bp
	mov	bp, sp
	sub	sp, 6
	mov	ax, L_chess_208
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, word [bp+6]
	mov	word [bp-6], ax
	mov	ax, L_chess_222
	push	ax
	call	_npf_printf
	add	sp, 2
	jmp	L_chess_227
L_chess_226:
	mov	ax, word [bp-6]
	test	ax, ax
	je	L_chess_228
	add	ax, 47
	push	ax
	mov	ax, word [bp+4]
	add	ax, 48
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
	dec	word [bp-6]
L_chess_227:
	mov	ax, word [bp+4]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp-6]
	dec	ax
	add	si, ax
	cmp	byte [si], 32
	je	L_chess_226
L_chess_228:
	mov	ax, word [bp+6]
	mov	word [bp-6], ax
	jmp	L_chess_231
L_chess_230:
	mov	ax, word [bp-6]
	add	ax, 49
	push	ax
	mov	ax, word [bp+4]
	add	ax, 48
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
	inc	word [bp-6]
L_chess_231:
	mov	ax, word [bp+4]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp-6]
	inc	ax
	add	si, ax
	cmp	byte [si], 32
	jne	L_chess_233
	mov	ax, word [bp-6]
	inc	ax
	cmp	ax, 7
	jle	L_chess_230
L_chess_233:
	mov	ax, L_chess_223
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, word [bp+4]
	mov	word [bp-6], ax
	jmp	L_chess_235
L_chess_234:
	mov	ax, word [bp+6]
	add	ax, 48
	push	ax
	mov	ax, word [bp-6]
	add	ax, 47
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
	dec	word [bp-6]
L_chess_235:
	mov	ax, word [bp-6]
	dec	ax
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+6]
	cmp	byte [si], 32
	jne	L_chess_237
	cmp	word [bp-6], -1
	jg	L_chess_234
L_chess_237:
	mov	ax, word [bp+4]
	mov	word [bp-6], ax
	jmp	L_chess_239
L_chess_238:
	mov	ax, word [bp+6]
	add	ax, 48
	push	ax
	mov	ax, word [bp-6]
	add	ax, 49
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
	inc	word [bp-6]
L_chess_239:
	mov	ax, word [bp-6]
	inc	ax
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+6]
	cmp	byte [si], 32
	jne	L_chess_241
	cmp	word [bp-6], 7
	jle	L_chess_238
L_chess_241:
	mov	sp, bp
	pop	bp
	ret

	section .data
L_chess_244:
	DB	"%c%c, ",0
L_chess_243:
	DB	"Available are: ",0

	section .text
	align	2
	global	_horse
_horse:
	push	bp
	mov	bp, sp
	mov	ax, L_chess_243
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, word [bp+4]
	add	ax, 2
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	inc	ax
	add	si, ax
	cmp	byte [si], 32
	jne	L_chess_247
	mov	ax, word [bp+6]
	add	ax, 49
	push	ax
	mov	ax, word [bp+4]
	add	ax, 50
	push	ax
	mov	ax, L_chess_244
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_247:
	mov	ax, word [bp+4]
	add	ax, 2
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	dec	ax
	add	si, ax
	cmp	byte [si], 32
	jne	L_chess_249
	mov	ax, word [bp+6]
	dec	ax
	cmp	ax, -1
	jle	L_chess_249
	mov	ax, word [bp+6]
	add	ax, 47
	push	ax
	mov	ax, word [bp+4]
	add	ax, 50
	push	ax
	mov	ax, L_chess_244
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_249:
	mov	ax, word [bp+4]
	inc	ax
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	add	ax, 2
	add	si, ax
	cmp	byte [si], 32
	jne	L_chess_251
	mov	ax, word [bp+6]
	add	ax, 2
	cmp	ax, 8
	je	L_chess_251
	mov	ax, word [bp+6]
	add	ax, 50
	push	ax
	mov	ax, word [bp+4]
	add	ax, 49
	push	ax
	mov	ax, L_chess_244
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_251:
	mov	ax, word [bp+4]
	dec	ax
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	add	ax, 2
	add	si, ax
	cmp	byte [si], 32
	jne	L_chess_252
	mov	ax, word [bp+6]
	add	ax, 50
	push	ax
	mov	ax, word [bp+4]
	add	ax, 47
	push	ax
	mov	ax, L_chess_244
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_252:
	mov	ax, word [bp+4]
	sub	ax, 2
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	dec	ax
	add	si, ax
	cmp	byte [si], 32
	jne	L_chess_254
	mov	ax, word [bp+6]
	dec	ax
	cmp	ax, -1
	je	L_chess_254
	mov	ax, word [bp+6]
	add	ax, 47
	push	ax
	mov	ax, word [bp+4]
	add	ax, 46
	push	ax
	mov	ax, L_chess_244
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_254:
	mov	ax, word [bp+4]
	sub	ax, 2
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	inc	ax
	add	si, ax
	cmp	byte [si], 32
	jne	L_chess_255
	mov	ax, word [bp+6]
	add	ax, 49
	push	ax
	mov	ax, word [bp+4]
	add	ax, 46
	push	ax
	mov	ax, L_chess_244
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_255:
	mov	ax, word [bp+4]
	inc	ax
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	sub	ax, 2
	add	si, ax
	cmp	byte [si], 32
	jne	L_chess_256
	mov	ax, word [bp+6]
	add	ax, 46
	push	ax
	mov	ax, word [bp+4]
	add	ax, 49
	push	ax
	mov	ax, L_chess_244
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_256:
	mov	ax, word [bp+4]
	dec	ax
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	sub	ax, 2
	add	si, ax
	cmp	byte [si], 32
	jne	L_chess_258
	mov	ax, word [bp+6]
	sub	ax, 2
	cmp	ax, -1
	je	L_chess_258
	mov	ax, word [bp+6]
	add	ax, 46
	push	ax
	mov	ax, word [bp+4]
	add	ax, 47
	push	ax
	mov	ax, L_chess_244
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_258:
	mov	sp, bp
	pop	bp
	ret

	section .data

	section .text
	align	2
	global	_camel
_camel:
	push	bp
	mov	bp, sp
	sub	sp, 8
	mov	ax, L_chess_208
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	word [bp-2], 1
	mov	word [bp-4], 1
	jmp	L_chess_263
L_chess_262:
	mov	ax, word [bp+4]
	sub	ax, word [bp-2]
	cmp	ax, -1
	je	L_chess_264
	mov	ax, word [bp+6]
	add	ax, word [bp-4]
	cmp	ax, 8
	je	L_chess_264
	mov	ax, word [bp+6]
	add	ax, word [bp-4]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	sub	ax, word [bp-2]
	add	ax, 48
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
	inc	word [bp-2]
	inc	word [bp-4]
L_chess_263:
	mov	ax, word [bp+4]
	sub	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	add	ax, word [bp-4]
	add	si, ax
	cmp	byte [si], 32
	je	L_chess_262
L_chess_264:
	mov	word [bp-2], 1
	mov	word [bp-4], 1
	jmp	L_chess_268
L_chess_267:
	mov	ax, word [bp+4]
	add	ax, word [bp-2]
	cmp	ax, 8
	je	L_chess_269
	mov	ax, word [bp+6]
	sub	ax, word [bp-4]
	cmp	ax, -1
	je	L_chess_269
	mov	ax, word [bp+6]
	sub	ax, word [bp-4]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	add	ax, word [bp-2]
	add	ax, 48
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
	inc	word [bp-2]
	inc	word [bp-4]
L_chess_268:
	mov	ax, word [bp+4]
	add	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	sub	ax, word [bp-4]
	add	si, ax
	cmp	byte [si], 32
	je	L_chess_267
L_chess_269:
	mov	word [bp-2], 1
	mov	word [bp-4], 1
	jmp	L_chess_273
L_chess_272:
	mov	ax, word [bp+4]
	add	ax, word [bp-2]
	cmp	ax, 8
	je	L_chess_274
	mov	ax, word [bp+6]
	add	ax, word [bp-4]
	cmp	ax, 8
	je	L_chess_274
	mov	ax, word [bp+6]
	add	ax, word [bp-4]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	add	ax, word [bp-2]
	add	ax, 48
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
	inc	word [bp-2]
	inc	word [bp-4]
L_chess_273:
	mov	ax, word [bp+4]
	add	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	add	ax, word [bp-4]
	add	si, ax
	cmp	byte [si], 32
	je	L_chess_272
L_chess_274:
	mov	word [bp-2], 1
	mov	word [bp-4], 1
	jmp	L_chess_278
L_chess_277:
	mov	ax, word [bp+4]
	sub	ax, word [bp-2]
	cmp	ax, -1
	je	L_chess_279
	mov	ax, word [bp+6]
	sub	ax, word [bp-4]
	cmp	ax, -1
	je	L_chess_279
	mov	ax, word [bp+6]
	sub	ax, word [bp-4]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	sub	ax, word [bp-2]
	add	ax, 48
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
	inc	word [bp-2]
	inc	word [bp-4]
L_chess_278:
	mov	ax, word [bp+4]
	sub	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	sub	ax, word [bp-4]
	add	si, ax
	cmp	byte [si], 32
	je	L_chess_277
L_chess_279:
	mov	sp, bp
	pop	bp
	ret

	section .data

	section .text
	align	2
	global	_king
_king:
	push	bp
	mov	bp, sp
	mov	ax, L_chess_243
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, word [bp+4]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	inc	ax
	add	si, ax
	cmp	byte [si], 32
	jne	L_chess_285
	mov	ax, word [bp+6]
	add	ax, 49
	push	ax
	mov	ax, word [bp+4]
	add	ax, 48
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_285:
	mov	ax, word [bp+4]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	dec	ax
	add	si, ax
	cmp	byte [si], 32
	jne	L_chess_286
	mov	ax, word [bp+6]
	add	ax, 47
	push	ax
	mov	ax, word [bp+4]
	add	ax, 48
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_286:
	mov	ax, word [bp+4]
	inc	ax
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+6]
	cmp	byte [si], 32
	jne	L_chess_287
	mov	ax, word [bp+6]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	add	ax, 49
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_287:
	mov	ax, word [bp+4]
	dec	ax
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+6]
	cmp	byte [si], 32
	jne	L_chess_288
	mov	ax, word [bp+6]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	add	ax, 47
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_288:
	mov	ax, word [bp+4]
	inc	ax
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	inc	ax
	add	si, ax
	cmp	byte [si], 32
	jne	L_chess_289
	mov	ax, word [bp+6]
	add	ax, 49
	push	ax
	mov	ax, word [bp+4]
	add	ax, 49
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_289:
	mov	ax, word [bp+4]
	dec	ax
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	dec	ax
	add	si, ax
	cmp	byte [si], 32
	jne	L_chess_290
	mov	ax, word [bp+6]
	add	ax, 47
	push	ax
	mov	ax, word [bp+4]
	add	ax, 47
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_290:
	mov	ax, word [bp+4]
	dec	ax
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	inc	ax
	add	si, ax
	cmp	byte [si], 32
	jne	L_chess_291
	mov	ax, word [bp+6]
	add	ax, 49
	push	ax
	mov	ax, word [bp+4]
	add	ax, 47
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_291:
	mov	ax, word [bp+4]
	inc	ax
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	dec	ax
	add	si, ax
	cmp	byte [si], 32
	jne	L_chess_292
	mov	ax, word [bp+6]
	add	ax, 47
	push	ax
	mov	ax, word [bp+4]
	add	ax, 49
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_292:
	mov	sp, bp
	pop	bp
	ret

	section .data
L_chess_296:
	DB	"Diagonally: ",0
L_chess_295:
	DB	"Vertical: ",0
L_chess_294:
	DB	"Horizontal: ",0

	section .text
	align	2
	global	_queen
_queen:
	push	bp
	mov	bp, sp
	sub	sp, 8
	mov	word [bp-2], 1
	mov	word [bp-4], 1
	mov	ax, L_chess_243
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, L_chess_294
	push	ax
	call	_npf_printf
	add	sp, 2
	jmp	L_chess_300
L_chess_299:
	mov	ax, word [bp+6]
	sub	ax, word [bp-4]
	cmp	ax, -1
	je	L_chess_301
	mov	ax, word [bp+6]
	sub	ax, word [bp-4]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	add	ax, 48
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
	inc	word [bp-4]
L_chess_300:
	mov	ax, word [bp+4]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	sub	ax, word [bp-4]
	add	si, ax
	cmp	byte [si], 32
	je	L_chess_299
L_chess_301:
	mov	word [bp-4], 1
	jmp	L_chess_304
L_chess_303:
	mov	ax, word [bp+6]
	add	ax, word [bp-4]
	cmp	ax, 8
	je	L_chess_305
	mov	ax, word [bp+6]
	add	ax, word [bp-4]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	add	ax, 48
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
	inc	word [bp-4]
L_chess_304:
	mov	ax, word [bp+4]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	add	ax, word [bp-4]
	add	si, ax
	cmp	byte [si], 32
	je	L_chess_303
L_chess_305:
	mov	ax, L_chess_295
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	word [bp-2], 1
	jmp	L_chess_308
L_chess_307:
	mov	ax, word [bp+4]
	sub	ax, word [bp-2]
	cmp	ax, -1
	je	L_chess_309
	mov	ax, word [bp+6]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	sub	ax, word [bp-2]
	add	ax, 48
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
	inc	word [bp-2]
L_chess_308:
	mov	ax, word [bp+4]
	sub	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+6]
	cmp	byte [si], 32
	je	L_chess_307
L_chess_309:
	mov	word [bp-2], 1
	jmp	L_chess_312
L_chess_311:
	mov	ax, word [bp+4]
	add	ax, word [bp-2]
	cmp	ax, 8
	je	L_chess_313
	mov	ax, word [bp+6]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	add	ax, word [bp-2]
	add	ax, 48
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
	inc	word [bp-2]
L_chess_312:
	mov	ax, word [bp+4]
	add	ax, word [bp-2]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+6]
	cmp	byte [si], 32
	je	L_chess_311
L_chess_313:
	mov	ax, L_chess_296
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	word [bp-6], 1
	mov	word [bp-8], 1
	jmp	L_chess_316
L_chess_315:
	mov	ax, word [bp+4]
	sub	ax, word [bp-6]
	cmp	ax, -1
	je	L_chess_317
	mov	ax, word [bp+6]
	add	ax, word [bp-8]
	cmp	ax, 8
	je	L_chess_317
	mov	ax, word [bp+6]
	add	ax, word [bp-8]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	sub	ax, word [bp-6]
	add	ax, 48
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
	inc	word [bp-6]
	inc	word [bp-8]
L_chess_316:
	mov	ax, word [bp+4]
	sub	ax, word [bp-6]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	add	ax, word [bp-8]
	add	si, ax
	cmp	byte [si], 32
	je	L_chess_315
L_chess_317:
	mov	word [bp-6], 1
	mov	word [bp-8], 1
	jmp	L_chess_321
L_chess_320:
	mov	ax, word [bp+4]
	add	ax, word [bp-6]
	cmp	ax, 8
	je	L_chess_322
	mov	ax, word [bp+6]
	sub	ax, word [bp-8]
	cmp	ax, -1
	je	L_chess_322
	mov	ax, word [bp+6]
	sub	ax, word [bp-8]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	add	ax, word [bp-6]
	add	ax, 48
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
	inc	word [bp-6]
	inc	word [bp-8]
L_chess_321:
	mov	ax, word [bp+4]
	add	ax, word [bp-6]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	sub	ax, word [bp-8]
	add	si, ax
	cmp	byte [si], 32
	je	L_chess_320
L_chess_322:
	mov	word [bp-6], 1
	mov	word [bp-8], 1
	jmp	L_chess_326
L_chess_325:
	mov	ax, word [bp+4]
	add	ax, word [bp-6]
	cmp	ax, 8
	je	L_chess_327
	mov	ax, word [bp+6]
	add	ax, word [bp-8]
	cmp	ax, 8
	je	L_chess_327
	mov	ax, word [bp+6]
	add	ax, word [bp-8]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	add	ax, word [bp-6]
	add	ax, 48
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
	inc	word [bp-6]
	inc	word [bp-8]
L_chess_326:
	mov	ax, word [bp+4]
	add	ax, word [bp-6]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	add	ax, word [bp-8]
	add	si, ax
	cmp	byte [si], 32
	je	L_chess_325
L_chess_327:
	mov	word [bp-6], 1
	mov	word [bp-8], 1
	jmp	L_chess_331
L_chess_330:
	mov	ax, word [bp+4]
	sub	ax, word [bp-6]
	cmp	ax, -1
	je	L_chess_332
	mov	ax, word [bp+6]
	sub	ax, word [bp-8]
	cmp	ax, -1
	je	L_chess_332
	mov	ax, word [bp+6]
	sub	ax, word [bp-8]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	sub	ax, word [bp-6]
	add	ax, 48
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
	inc	word [bp-6]
	inc	word [bp-8]
L_chess_331:
	mov	ax, word [bp+4]
	sub	ax, word [bp-6]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	mov	ax, word [bp+6]
	sub	ax, word [bp-8]
	add	si, ax
	cmp	byte [si], 32
	je	L_chess_330
L_chess_332:
	mov	sp, bp
	pop	bp
	ret

	section .data

	section .text
	align	2
	global	_pawnb
_pawnb:
	push	bp
	mov	bp, sp
	mov	ax, word [bp+6]
	shl	ax, 1
	mov	si, ax
	add	si, _pbstatus
	inc	word [si]
	mov	ax, L_chess_208
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, word [bp+6]
	shl	ax, 1
	mov	si, ax
	add	si, _pbstatus
	cmp	word [si], 1
	jne	L_chess_338
	mov	ax, word [bp+4]
	dec	ax
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+6]
	cmp	byte [si], 32
	jne	L_chess_339
	mov	ax, word [bp+6]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	add	ax, 47
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_339:
	mov	ax, word [bp+4]
	sub	ax, 2
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+6]
	cmp	byte [si], 32
	jne	L_chess_344
	mov	ax, word [bp+6]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	add	ax, 46
	push	ax
	mov	ax, L_chess_209
	jmp	L_chess_345
L_chess_338:
	mov	ax, word [bp+4]
	dec	ax
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+6]
	cmp	byte [si], 32
	jne	L_chess_342
	mov	ax, word [bp+6]
	add	ax, 48
	push	ax
	mov	ax, word [bp+4]
	add	ax, 47
	push	ax
	mov	ax, L_chess_209
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_342:
	mov	ax, word [bp+6]
	dec	ax
	push	ax
	mov	ax, word [bp+4]
	dec	ax
	push	ax
	call	_check2
	add	sp, 4
	cmp	ax, 1
	jne	L_chess_343
	mov	ax, word [bp+6]
	add	ax, 47
	push	ax
	mov	ax, word [bp+4]
	add	ax, 47
	push	ax
	mov	ax, L_chess_210
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_343:
	mov	ax, word [bp+6]
	inc	ax
	push	ax
	mov	ax, word [bp+4]
	dec	ax
	push	ax
	call	_check2
	add	sp, 4
	cmp	ax, 1
	jne	L_chess_344
	mov	ax, word [bp+6]
	add	ax, 49
	push	ax
	mov	ax, word [bp+4]
	add	ax, 47
	push	ax
	mov	ax, L_chess_210
L_chess_345:
	push	ax
	call	_npf_printf
	add	sp, 6
L_chess_344:
	mov	sp, bp
	pop	bp
	ret

	section .data
L_chess_351:
	DB	0xA,"Enter Position of Place to Send ( RC ): ",0
L_chess_350:
	DB	"Invalid Position ! ",0
L_chess_349:
	DB	0xA,"Enter Position of Element to change ( RC ): ",0
L_chess_347:
	DB	0xA,"PLAYER 1 - Big Case",0xA,0

	section .text
	align	2
	global	_player1
_player1:
	push	bp
	mov	bp, sp
	sub	sp, 14
	mov	ax, L_chess_347
L_chess_362:
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, L_chess_349
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, 1
	push	ax
	lea	ax, [bp-14]
	push	ax
	xor	ax, ax
	push	ax
	call	_read
	add	sp, 6
	mov	ax, word [bp-14]
	mov	cx, 10
	imul	cx
	add	ax, -480
	mov	word [bp-2], ax
	mov	ax, 1
	push	ax
	lea	ax, [bp-14]
	push	ax
	xor	ax, ax
	push	ax
	call	_read
	add	sp, 6
	mov	ax, word [bp-14]
	sub	ax, 48
	add	word [bp-2], ax
	mov	ax, 1
	push	ax
	lea	ax, [bp-14]
	push	ax
	xor	ax, ax
	push	ax
	call	_read
	add	sp, 6
	mov	ax, word [bp-2]
	cwd
	mov	cx, 10
	idiv	cx
	mov	ax, dx
	mov	word [bp-6], ax
	mov	ax, word [bp-2]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-8], ax
	mov	ax, word [bp-8]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp-6]
	mov	al, byte [si]
	sub	al, 80
	je	L_chess_356
	sub	al, 2
	je	L_chess_357
	sub	al, -10
	je	L_chess_358
	sub	al, -5
	je	L_chess_359
	sub	al, 8
	je	L_chess_360
	sub	al, 6
	je	L_chess_361
	mov	ax, L_chess_350
	jmp	L_chess_362
L_chess_356:
	push	word [bp-6]
	push	word [bp-8]
	call	_pawn
L_chess_363:
	add	sp, 4
	mov	ax, L_chess_351
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, 1
	push	ax
	lea	ax, [bp-14]
	push	ax
	xor	ax, ax
	push	ax
	call	_read
	add	sp, 6
	mov	ax, word [bp-14]
	mov	cx, 10
	imul	cx
	add	ax, -480
	mov	word [bp-4], ax
	mov	ax, 1
	push	ax
	lea	ax, [bp-14]
	push	ax
	xor	ax, ax
	push	ax
	call	_read
	add	sp, 6
	mov	ax, word [bp-14]
	sub	ax, 48
	add	word [bp-4], ax
	mov	ax, 1
	push	ax
	lea	ax, [bp-14]
	push	ax
	xor	ax, ax
	push	ax
	call	_read
	add	sp, 6
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	ax, dx
	mov	word [bp-10], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-12], ax
	push	word [bp-10]
	push	word [bp-12]
	push	word [bp-6]
	push	word [bp-8]
	call	_change
	add	sp, 8
	mov	sp, bp
	pop	bp
	ret
L_chess_357:
	push	word [bp-6]
	push	word [bp-8]
	call	_rook
	jmp	L_chess_363
L_chess_358:
	push	word [bp-6]
	push	word [bp-8]
	call	_horse
	jmp	L_chess_363
L_chess_359:
	push	word [bp-6]
	push	word [bp-8]
	call	_camel
	jmp	L_chess_363
L_chess_360:
	push	word [bp-6]
	push	word [bp-8]
	call	_king
	jmp	L_chess_363
L_chess_361:
	push	word [bp-6]
	push	word [bp-8]
	call	_queen
	jmp	L_chess_363

	section .data
L_chess_365:
	DB	0xA,"PLAYER 2 - Small Case ",0xA,0

	section .text
	align	2
	global	_player2
_player2:
	push	bp
	mov	bp, sp
	sub	sp, 14
	mov	ax, L_chess_365
L_chess_377:
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, L_chess_349
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, 1
	push	ax
	lea	ax, [bp-14]
	push	ax
	xor	ax, ax
	push	ax
	call	_read
	add	sp, 6
	mov	ax, word [bp-14]
	mov	cx, 10
	imul	cx
	add	ax, -480
	mov	word [bp-2], ax
	mov	ax, 1
	push	ax
	lea	ax, [bp-14]
	push	ax
	xor	ax, ax
	push	ax
	call	_read
	add	sp, 6
	mov	ax, word [bp-14]
	sub	ax, 48
	add	word [bp-2], ax
	mov	ax, 1
	push	ax
	lea	ax, [bp-14]
	push	ax
	xor	ax, ax
	push	ax
	call	_read
	add	sp, 6
	mov	ax, word [bp-2]
	cwd
	mov	cx, 10
	idiv	cx
	mov	ax, dx
	mov	word [bp-6], ax
	mov	ax, word [bp-2]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-8], ax
	mov	ax, word [bp-8]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp-6]
	mov	al, byte [si]
	sub	al, 112
	je	L_chess_371
	sub	al, 2
	je	L_chess_372
	sub	al, -10
	je	L_chess_373
	sub	al, -5
	je	L_chess_374
	sub	al, 8
	je	L_chess_375
	sub	al, 6
	je	L_chess_376
	mov	ax, L_chess_350
	jmp	L_chess_377
L_chess_371:
	push	word [bp-6]
	push	word [bp-8]
	call	_pawnb
L_chess_378:
	add	sp, 4
	mov	ax, L_chess_351
	push	ax
	call	_npf_printf
	add	sp, 2
	mov	ax, 1
	push	ax
	lea	ax, [bp-14]
	push	ax
	xor	ax, ax
	push	ax
	call	_read
	add	sp, 6
	mov	ax, word [bp-14]
	mov	cx, 10
	imul	cx
	add	ax, -480
	mov	word [bp-4], ax
	mov	ax, 1
	push	ax
	lea	ax, [bp-14]
	push	ax
	xor	ax, ax
	push	ax
	call	_read
	add	sp, 6
	mov	ax, word [bp-14]
	sub	ax, 48
	add	word [bp-4], ax
	mov	ax, 1
	push	ax
	lea	ax, [bp-14]
	push	ax
	xor	ax, ax
	push	ax
	call	_read
	add	sp, 6
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	ax, dx
	mov	word [bp-10], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-12], ax
	push	word [bp-10]
	push	word [bp-12]
	push	word [bp-6]
	push	word [bp-8]
	call	_change
	add	sp, 8
	mov	sp, bp
	pop	bp
	ret
L_chess_372:
	push	word [bp-6]
	push	word [bp-8]
	call	_rook
	jmp	L_chess_378
L_chess_373:
	push	word [bp-6]
	push	word [bp-8]
	call	_horse
	jmp	L_chess_378
L_chess_374:
	push	word [bp-6]
	push	word [bp-8]
	call	_camel
	jmp	L_chess_378
L_chess_375:
	push	word [bp-6]
	push	word [bp-8]
	call	_king
	jmp	L_chess_378
L_chess_376:
	push	word [bp-6]
	push	word [bp-8]
	call	_queen
	jmp	L_chess_378

	section .data

	section .text
	align	2
	global	_check
_check:
	push	bp
	mov	bp, sp
	mov	ax, word [bp+4]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+6]
	mov	al, byte [si]
	sub	al, 112
	je	L_chess_384
	sub	al, -8
	je	L_chess_384
	sub	al, -5
	je	L_chess_384
	sub	al, 8
	je	L_chess_384
	sub	al, 6
	je	L_chess_384
	dec	al
	je	L_chess_384
	xor	ax, ax
	jmp	L_chess_382
L_chess_384:
	mov	ax, 1
L_chess_382:
	mov	sp, bp
	pop	bp
	ret

	section .data

	section .text
	align	2
	global	_check2
_check2:
	push	bp
	mov	bp, sp
	mov	ax, word [bp+4]
	mov	cx, 3
	shl	ax, cl
	add	ax, _board
	mov	si, ax
	add	si, word [bp+6]
	mov	al, byte [si]
	sub	al, 80
	je	L_chess_396
	sub	al, -8
	je	L_chess_396
	sub	al, -5
	je	L_chess_396
	sub	al, 8
	je	L_chess_396
	sub	al, 6
	je	L_chess_396
	dec	al
	je	L_chess_396
	xor	ax, ax
	jmp	L_chess_394
L_chess_396:
	mov	ax, 1
L_chess_394:
	mov	sp, bp
	pop	bp
	ret
	extern	ilmod
	extern	asuldiv
	extern	_write
	extern	_read
	global	_buffer_internal

	section .bss
_buffer_internal:
	RESB	80

	section .data
